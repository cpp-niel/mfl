#pragma once

#include "mfl/code_point.hpp"

#include <array>
#include <utility>

namespace mfl::parser
{
    constexpr auto relational_operators = std::array<std::pair<const char*, code_point>, 36>{{
        {"Join", 0x2a1d},     {"approx", 0x2248},   {"asymp", 0x224d},  {"bowtie", 0x22c8}, {"cong", 0x2245},
        {"dashv", 0x22a3},    {"doteq", 0x2250},    {"equiv", 0x2261},  {"frown", 0x2322},  {"geq", 0x2265},
        {"ge", 0x2265},       {"gg", 0x226b},       {"in", 0x2208},     {"leq", 0x2264},    {"le", 0x2264},
        {"ll", 0x226a},       {"mid", 0x2223},      {"models", 0x22a7}, {"neq", 0x2260},    {"ne", 0x2260},
        {"ni", 0x220b},       {"parallel", 0x2225}, {"perp", 0x27c2},   {"prec", 0x227a},   {"preceq", 0x227c},
        {"propto", 0x221d},   {"sim", 0x223c},      {"simeq", 0x2243},  {"smile", 0x2323},  {"subset", 0x2282},
        {"subseteq", 0x2286}, {"succ", 0x227b},     {"succeq", 0x227d}, {"supset", 0x2283}, {"supseteq", 0x2287},
        {"vdash", 0x22a2},
    }};

    constexpr auto additional_relational_operators = std::array<std::pair<const char*, code_point>, 119>{{
        {"Bumpeq", 0x224e},
        {"Doteq", 0x2251},
        {"Equiv", 0x2263},
        {"Subset", 0x22d0},
        {"Supset", 0x22d1},
        {"Vdash", 0x22a9},
        {"Vvdash", 0x22aa},
        {"ac", 0x223e},
        {"approxeq", 0x224a},
        {"approxident", 0x224b},
        {"arceq", 0x2258},
        {"backcong", 0x224c},
        {"backepsilon", 0x03f6},
        {"backsim", 0x223d},
        {"backsimeq", 0x22cd},
        {"because", 0x2235},
        {"between", 0x226c},
        {"blacktriangle", 0x25b4},
        {"bot", 0x22a5},
        {"bumpeq", 0x224f},
        {"circeq", 0x2257},
        {"coloneq", 0x2254},
        {"cupdot", 0x228d},
        {"curlyeqprec", 0x22de},
        {"curlyeqsucc", 0x22df},
        {"doteqdot", 0x2251},
        {"eqcirc", 0x2256},
        {"eqcolon", 0x2255},
        {"eqdef", 0x225d},
        {"eqgtr", 0x22dd},
        {"eqless", 0x22dc},
        {"eqsim", 0x2242},
        {"eqslantgtr", 0x2a96},
        {"eqslantless", 0x2a95},
        {"equal", 0x003d},
        {"fallingdotseq", 0x2252},
        {"geqq", 0x2267},
        {"geqslant", 0x2a7e},
        {"ggg", 0x22d9},
        {"gnapprox", 0x2aba},
        {"gneq", 0x2a88},
        {"gneqq", 0x2269},
        {"gnsim", 0x22e7},
        {"greater", 0x003e},
        {"gtrapprox", 0x2a86},
        {"gtrdot ", 0x22d7},
        {"gtrdot", 0x22d7},
        {"gtreqless", 0x22db},
        {"gtreqqless", 0x2a8c},
        {"gtrless", 0x2277},
        {"gtrsim", 0x2273},
        {"imageof", 0x22b7},
        {"in", 0x2208},
        {"leqq", 0x2266},
        {"leqslant", 0x2a7d},
        {"less", 0x003c},
        {"lessapprox", 0x2a85},
        {"lessdot", 0x22d6},
        {"lesseqgtr", 0x22da},
        {"lesseqqgtr", 0x2a8b},
        {"lessgtr", 0x2276},
        {"lesssim", 0x2272},
        {"lll", 0x22d8},
        {"lnapprox", 0x2ab9},
        {"lneq", 0x2a87},
        {"lneqq", 0x2268},
        {"lnsim", 0x22e6},
        {"measeq", 0x225e},
        {"multimap", 0x22b8},
        {"nVdash", 0x22ae},
        {"neq", 0x2260},
        {"ngeq", 0x2271},
        {"ngtr", 0x226f},
        {"nleq", 0x2270},
        {"nless", 0x226e},
        {"nsim", 0x2241},
        {"nsubseteq", 0x2288},
        {"nsupseteq", 0x2289},
        {"ntriangleright", 0x22eb},
        {"origof", 0x22b6},
        {"pitchfork", 0x22d4},
        {"precapprox", 0x2ab7},
        {"preccurlyeq", 0x227c},
        {"precsim", 0x227e},
        {"prurel", 0x22b0},
        {"questeq", 0x225f},
        {"risingdotseq", 0x2253},
        {"scurel", 0x22b1},
        {"smallfrown", 0x23dc},
        {"smallsmile", 0x23dd},
        {"solbar", 0x233f},
        {"sqsubset", 0x228f},
        {"sqsubseteq", 0x2291},
        {"sqsupset", 0x2290},
        {"sqsupseteq", 0x2292},
        {"stareq", 0x225b},
        {"subseteqq", 0x2ac5},
        {"subsetneq", 0x228a},
        {"subsetneqq", 0x2acb},
        {"succapprox", 0x2ab8},
        {"succcurlyeq", 0x227d},
        {"succsim", 0x227f},
        {"supseteqq", 0x2ac6},
        {"supsetneq", 0x228b},
        {"supsetneqq", 0x2acc},
        {"therefore", 0x2234},
        {"top", 0x22a4},
        {"triangledown", 0x25bf},
        {"triangleeq", 0x225c},
        {"trianglelefteq", 0x22b4},
        {"triangleq", 0x225c},
        {"trianglerighteq", 0x22b5},
        {"vDash", 0x22a8},
        {"varpropto", 0x221d},
        {"vartriangle", 0x25b5},
        {"vartriangleleft", 0x22b2},
        {"vartriangleright", 0x22b3},
        {"veeeq", 0x225a},
        {"wedgeq", 0x2259},
    }};

    constexpr auto negations = std::array<std::pair<const char*, code_point>, 22>{{
        {"not<", 0x226e},          {"not>", 0x226f},        {"not=", 0x02260},           {"not\\le", 0x2270},
        {"not\\ge", 0x2271},       {"not\\equiv", 0x2262},  {"not\\prec", 0x2280},       {"not\\succ", 0x2281},
        {"not\\sim", 0x2241},      {"not\\preceq", 0x22e0}, {"not\\succeq", 0x22e1},     {"not\\simeq", 0x2244},
        {"not\\subset", 0x2284},   {"not\\supset", 0x2285}, {"not\\approx", 0x2249},     {"not\\subseteq", 0x2288},
        {"not\\supseteq", 0x2289}, {"not\\cong", 0x2247},   {"not\\sqsubseteq", 0x22e2}, {"not\\sqsupseteq", 0x22e3},
        {"not\\asymp", 0x226d},    {"not\\in", 0x2209},
    }};

    constexpr auto additional_negations = std::array<std::pair<const char*, code_point>, 24>{{
        {"nVDash", 0x22af},
        {"napprox", 0x2249},
        {"ncong", 0x2247},
        {"nequiv", 0x2247},
        {"nmid", 0x2224},
        {"notin", 0x2209},
        {"nparallel", 0x2226},
        {"nprec", 0x2280},
        {"npreceq", 0x22e0},
        {"nsime", 0x2244},
        {"nsubset", 0x2284},
        {"nsucc", 0x2281},
        {"nsucceq", 0x22e1},
        {"nsupset", 0x2285},
        {"ntriangleleft", 0x22ea},
        {"ntriangleright", 0x22eb},
        {"ntrianglelefteq", 0x22ec},
        {"ntrianglerighteq", 0x22ed},
        {"nvDash", 0x22ad},
        {"nvdash", 0x22ac},
        {"precnapprox", 0x2ab9},
        {"precnsim", 0x22e8},
        {"succnapprox", 0x2aba},
        {"succnsim", 0x22e9},
    }};
}